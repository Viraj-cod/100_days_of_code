class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
    
class Linkedlist:
    def __init__(self):
        self.head = None
    
    def insert(self,val):
        new = Node(val)
        if self.head is None:
            self.head = new
            new.next = self.head
            return
        temp = self.head
        while temp.next is not self.head:
            temp = temp.next
        temp.next = new
        new.next = self.head
    
    def display(self):
        temp = self.head.next
        print(self.head.data,end = '->')
        while temp is not self.head:
            print(temp.data,end = '->')
            temp = temp.next
        print(None)
    
    def insert_sort(self,val):
        new = Node(val)
        if self.head is None:
            self.head = new
            new.next = self.head
            return
        if new.data <= self.head.data:
            new.next = self.head
            self.head = new
            return
        slow = self.head
        fast = self.head.next
        count = 0
        while fast is not self.head:
            if new.data <= fast.data:
                new.next = slow.next
                slow.next = new
                count = 1
                break
            fast = fast.next
            slow = slow.next
        if count == 0:
            self.insert(val)
        self.display()
        
def main():
    ll = Linkedlist()
    inp = list(map(int,input("Enter the elements to add in linked list:").split()))
    x = int(input("Enter th element to add in ll:"))
    for i in inp:
        ll.insert(i)
    ll.display()
    ll.insert_sort(x)
    
if __name__ == '__main__':
    main()
