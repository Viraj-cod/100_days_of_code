class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        
class linkedlist:
    def __init__(self):
        self.head = None
        
    def add(self,val):
        new = Node(val)
        if self.head == None:
            self.head = new
            return
        temp = self.head
        while temp.next is not None:
            temp = temp.next
        temp.next = new
    
    def display(self):
        temp =self.head
        while temp is not None:
            print(temp.data,end = '->')
            temp= temp.next
        print('None')

    def lng(self):
        count = 0
        temp= self.head
        while temp is not None:
            count += 1
            temp = temp.next
        return count

    def num(self):
        ln = self.lng()
        temp = self.head
        number = 0
        while temp is not None:
            number = number + temp.data*(10**(ln-1))
            temp = temp.next
            ln = ln - 1
        return number
    
def n_to_ll(val):
    ll3 = linkedlist()
    nm = str(val)
    for i in nm:
       ll3.add(int(i))
    ll3.display()

def addll(one,two):
    num1 = one.num()
    num2 = two.num()
    return num1 + num2

def sub(one,two):
    num1 = one.num()
    num2 = two.num()
    if (num1 - num2) < 0:
        return num2 - num1
    else:
        return num1 - num2 

if __name__ == '__main__':
    ll1 = linkedlist()
    ll1.add(1)
    ll1.add(0)
    ll1.add(0)
    ll2 = linkedlist()
    ll2.add(1)
    ll2.add(2)
    #print(ll2.num())
    res = sub(ll1,ll2)
    n_to_ll(res)
    
        
