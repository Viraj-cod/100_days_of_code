class node:
    def __init__(self,data):
        self.data = data
        self.next = None
    
class linkedlist:
    def __init__(self):
        self.head = None
    
    def insert(self,ele):
        new = node(ele)
        i = 0
        if self.head is None:
            self.head = new
            return
        temp = self.head
        while temp.next is not None:
            temp = temp.next
        temp.next = new
            
    def insert_cyc(self,pos=None):
        i = 0
        temp = self.head
        temp2 = self.head
        while temp.next is not None:
            temp = temp.next
        if pos is None:
            return
        else:
            while i != pos:
                temp2 = temp2.next
                i += 1
            temp.next = temp2
            
    def display(self):
        temp = self.head
        while temp is not None:
            print(temp.data,end = '->')
            temp = temp.next
        print('None')
        
    def count(self):
        temp = self.head
        e = 1
        while temp.next is not None:
            e += 1
            temp = temp.next
        return e
        
    def hascycle(self,num):
        temp = self.head
        i = 1
        while i < num:
            temp = temp.next
            i+=1
        if temp.next is not None:
            return True
        return False
        
def main():
    pos = 1
    ll = linkedlist()
    ll.insert(3)
    ll.insert(2)
    ll.insert(0)
    ll.insert(-4)
    cnt = ll.count() 
    ll.insert_cyc(pos)
    #ll.display()
    print(ll.hascycle(cnt))

if __name__ == '__main__':
    main()
