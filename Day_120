class node:
    def __init__(self,data):
        self.data = data
        self.next = None

class linkedlist:
    def __init__(self):
        self.head = None
    
    def insert(self,val):
        new = node(val)
        if self.head is None:
            self.head = new
            return
        temp = self.head
        while temp.next is not None:
            temp = temp.next
        temp.next = new
    
    def display(self):
        temp = self.head
        while temp is not None:
            print(temp.data,end='->')
            temp = temp.next
        print('None')

def merge(l1,l2):
    temp = l1.head
    while temp is not None:
        slow = l2.head
        fast = l2.head.next
        newm = node(temp.data)
        while fast is not None:
            if l2.head.data > newm.data:
                newm.next = l2.head
                l2.head = newm
                break
            elif newm.data <= fast.data:
                newm.next = fast
                slow.next = newm
                break
            slow = slow.next
            fast = fast.next
        temp = temp.next
    l2.display()

def main():
    ele = list(map(int,input("Enter the elements:").split()))
    ele2 = list(map(int,input("Enter the elements:").split()))
    obj = linkedlist()
    obj2 = linkedlist()
    for i in ele:
        obj.insert(i)
    for i in ele2:
        obj2.insert(i)
    merge(obj,obj2)

if __name__ == '__main__':
    main()
